// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: research/gtfs_realtime/v1/gtfs_realtime.proto

package gtfs_realtimev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kantacky/apis-go/research/gtfs_realtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GTFSRealtimeServiceName is the fully-qualified name of the GTFSRealtimeService service.
	GTFSRealtimeServiceName = "research.gtfs_realtime.v1.GTFSRealtimeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GTFSRealtimeServiceListVehiclePositionsProcedure is the fully-qualified name of the
	// GTFSRealtimeService's ListVehiclePositions RPC.
	GTFSRealtimeServiceListVehiclePositionsProcedure = "/research.gtfs_realtime.v1.GTFSRealtimeService/ListVehiclePositions"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gTFSRealtimeServiceServiceDescriptor                    = v1.File_research_gtfs_realtime_v1_gtfs_realtime_proto.Services().ByName("GTFSRealtimeService")
	gTFSRealtimeServiceListVehiclePositionsMethodDescriptor = gTFSRealtimeServiceServiceDescriptor.Methods().ByName("ListVehiclePositions")
)

// GTFSRealtimeServiceClient is a client for the research.gtfs_realtime.v1.GTFSRealtimeService
// service.
type GTFSRealtimeServiceClient interface {
	ListVehiclePositions(context.Context, *connect.Request[v1.ListVehiclePositionsRequest]) (*connect.Response[v1.ListVehiclePositionsResponse], error)
}

// NewGTFSRealtimeServiceClient constructs a client for the
// research.gtfs_realtime.v1.GTFSRealtimeService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGTFSRealtimeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GTFSRealtimeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gTFSRealtimeServiceClient{
		listVehiclePositions: connect.NewClient[v1.ListVehiclePositionsRequest, v1.ListVehiclePositionsResponse](
			httpClient,
			baseURL+GTFSRealtimeServiceListVehiclePositionsProcedure,
			connect.WithSchema(gTFSRealtimeServiceListVehiclePositionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gTFSRealtimeServiceClient implements GTFSRealtimeServiceClient.
type gTFSRealtimeServiceClient struct {
	listVehiclePositions *connect.Client[v1.ListVehiclePositionsRequest, v1.ListVehiclePositionsResponse]
}

// ListVehiclePositions calls research.gtfs_realtime.v1.GTFSRealtimeService.ListVehiclePositions.
func (c *gTFSRealtimeServiceClient) ListVehiclePositions(ctx context.Context, req *connect.Request[v1.ListVehiclePositionsRequest]) (*connect.Response[v1.ListVehiclePositionsResponse], error) {
	return c.listVehiclePositions.CallUnary(ctx, req)
}

// GTFSRealtimeServiceHandler is an implementation of the
// research.gtfs_realtime.v1.GTFSRealtimeService service.
type GTFSRealtimeServiceHandler interface {
	ListVehiclePositions(context.Context, *connect.Request[v1.ListVehiclePositionsRequest]) (*connect.Response[v1.ListVehiclePositionsResponse], error)
}

// NewGTFSRealtimeServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGTFSRealtimeServiceHandler(svc GTFSRealtimeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gTFSRealtimeServiceListVehiclePositionsHandler := connect.NewUnaryHandler(
		GTFSRealtimeServiceListVehiclePositionsProcedure,
		svc.ListVehiclePositions,
		connect.WithSchema(gTFSRealtimeServiceListVehiclePositionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/research.gtfs_realtime.v1.GTFSRealtimeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GTFSRealtimeServiceListVehiclePositionsProcedure:
			gTFSRealtimeServiceListVehiclePositionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGTFSRealtimeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGTFSRealtimeServiceHandler struct{}

func (UnimplementedGTFSRealtimeServiceHandler) ListVehiclePositions(context.Context, *connect.Request[v1.ListVehiclePositionsRequest]) (*connect.Response[v1.ListVehiclePositionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("research.gtfs_realtime.v1.GTFSRealtimeService.ListVehiclePositions is not implemented"))
}
